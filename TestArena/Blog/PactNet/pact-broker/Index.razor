@page "/blog/integration-with-pactflow"
@using TestArena.Blog.Common

<BlogContainer>
    <Header 
        Title="Intro to PACT for .NET Core: Integration with PactFlow"
        Image="/images/blog/pact/pact-broker/blog_header.png"
        PublishedOn="@DateTime.Now"
        Authors="Ajay Kumar" />

    <Section Heading="Introduction">
        <p>This is in continuation of PACT for .NET series where we will be looking into one of the ways to integrate our APIs with PactFlow.</p>
        <p>For a short introduction, PactFlow is a platform that can act as a broker between consumers and providers services/systems. Consumers can push/upload the contracts to PactFlow and provider systems can read the same contracts and try to verify them.</p>
        <p>In PactFlow one can visualise failing/passing contracts, total contract integrations, dependency graph and much more. For a better read please visit <a href="https://pactflow.io/">https://pactflow.io/</a></p>
        <p>You need to register into pact for for a limited free or paid account. For this demo i am using free account that can support up to 2 contracts as per their docs.</p>
        <p>Now, for this article we will be following the same Student and Result API scenario, where student is the Provider service and Result service is the consumer service.</p>
    </Section>

    <p>To learn more about demo repo that we will be using in this article, please follow previous articles in this series:</p>
    <BlogReferenceCard 
        Title="Contract testing for APIs: Intro to PACT for .NET Core"
        Description="Intro to PACT for .NET Core: API contract testing"
        Url="/blog/contract-testing-pact-net-intro"
        ImageUrl="/images/blog/pact/intro/header_landscape.png"
        Source="devcodex.in"/>
    <BlogReferenceCard 
        Title="Intro to PACT for .NET Core: Events Based Systems"
        Description="Intro to PACT for .NET Core: Events Based Systems"
        Url="/blog/contract-testing-in-pact-with-events"
        ImageUrl="/images/blog/pact/events-demo/contract-testing-events.webp"
        Source="devcodex.in"/>

    <Section Heading="Consumer Side">
        <p>Once the PACT contract file is generated by the consumer, there are several ways we can push or upload the contract to PactFlow. You can read about all the ways at <a href="https://docs.pact.io/getting_started/sharing_pacts">https://docs.pact.io/getting_started/sharing_pacts</a>.</p>
        <p>For this post, I have used a combination of their REST APIs and the PactNet library.</p>
        <p>The below utility code uploads the contract file to the Pact broker. Among all the parameters, it requires the Pact broker base URI and read/write access token for authentication to the Pact broker. You can obtain this information by logging into your PactFlow account and reaching out to the settings section.</p>

        <BlogImage ImagePath="/images/blog/pact/pact-broker/PactFlow settings section.webp" Description="PactFlow settings section" Number="1" />

        <CodeSnippet Number="1" Description="Code to push pact contract file to pact flow">
// Code to push pact contract file to pact flow
using System.Net;
using System.Net.Http.Headers;
using System.Text;

namespace PactNet.ConsumerOne.UnitTest.Utilities;

public abstract class PactBrokerUtiliy
{
    private const string PactSubUrl = "{0}/pacts/provider/{1}/consumer/{2}/version/{3}";
    
    public static async Task&lt;HttpStatusCode&gt; PublishPactContract(string pactFlowBaseUri,string consumerName, string providerName, string contractJson, string accessToken, string consumerVersion = "")
    {
        var httpClient = new HttpClient();
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", accessToken);
        var fullUrl = string.Format(PactSubUrl, pactFlowBaseUri, providerName, consumerName, string.IsNullOrEmpty(consumerVersion) ? Guid.NewGuid() : consumerVersion);

        var response =
            await httpClient.PutAsync(fullUrl, new StringContent(contractJson, Encoding.UTF8, "application/json"));
        var responseContent = await response.Content.ReadAsStringAsync();
        return response.StatusCode;
    }
}
        </CodeSnippet>
    </Section>

    <Section Heading="Demo Setup">
        <p>For this article, we will be following the same Student and Result API scenario, where Student is the Provider service and Result is the Consumer.</p>
        <p>To learn more about the demo repo that we will be using in this article, please follow previous articles in this series:</p>
        <p><a href="">Contract testing for APIs: Intro to PACT for .NET Core</a></p>
    </Section>

    <Section Heading="Consumer Side: Uploading Contracts">
        <p>Once the PACT contract file is generated by the consumer, there are several ways we can push or upload the contract to PactFlow.</p>
        <p>For this post, I have used a combination of their REST APIs and the PactNet library.</p>
        <p>The below utility code uploads the contract file to the Pact broker. Among all the parameters, it requires the Pact broker base URI and read access information from the PactFlow settings.</p>
        <BlogImage ImagePath="/images/blog/pact/pact-broker/settings.webp" Description="PactFlow settings section" />
        <pre><code>
        using System.Net;
        using System.Net.Http.Headers;
        using System.Text;

        namespace PactNet.ConsumerOne.UnitTest.Utilities;

        public abstract class PactBrokerUtiliy
        {
            private const string PactSubUrl = "{0}/pacts/provider/{1}/consumer/{2}/version/{3}";
            
            public static async Task&lt;HttpStatusCode&gt; PublishPactContract(
                string pactFlowBaseUri, string consumerName, string providerName,
                string contractJson, string accessToken, string consumerVersion)
            {
                var httpClient = new HttpClient();
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", accessToken);
                var fullUrl = string.Format(PactSubUrl, pactFlowBaseUri, providerName, consumerName, consumerVersion);
                var response = await httpClient.PutAsync(fullUrl, new StringContent(contractJson, Encoding.UTF8, "application/json"));
                return response.StatusCode;
            }
        }
        </code></pre>
    </Section>

    <Section Heading="Running the Tests">
        <p>After all these code changes and settings are in place, we can run the test and should expect success. The following things will happen when the test runs:</p>
        <ul>
            <li>Our request verification and assertion will occur.</li>
            <li>Pact contract file will be generated at the specified location.</li>
            <li>The same Pact file content will be read and passed on to the utility method to be sent as payload to HTTP request to PactFlow.</li>
        </ul>
        <BlogImage ImagePath="/images/blog/pact/pact-broker/integration.webp" Description="Student API and its consumer integration in PactFlow" />
    </Section>

    <Section Heading="Provider Side Verification">
        <p>Provider-side verification is relatively straightforward. The following unit test in the provider's unit test class ensures compliance with the contract.</p>
        <pre><code>
        [Fact]
        public void Ensure_StudentApi_Honours_Pact_With_ConsumerOne_Using_PactFlow()
        {
            var config = new PactVerifierConfig
            {
                Outputters = new List&lt;IOutput&gt; { new XunitOutput(_output) },
                LogLevel = PactLogLevel.Information
            };
            var pactFlowBaseUri = Environment.GetEnvironmentVariable("PACT_FLOW_BASE_URL");
            var pactFlowToken = Environment.GetEnvironmentVariable("PACT_FLOW_TOKEN");

            IPactVerifier pactVerifier = new PactVerifier(config);
            pactVerifier
                .ServiceProvider("Student API", _fixture.ServerUri)
                .WithPactBrokerSource(new Uri(pactFlowBaseUri), configure =>
                {
                    configure.TokenAuthentication(pactFlowToken);
                    configure.PublishResults(true, "1.0.0");
                })
                .Verify();
        }
        </code></pre>
    </Section>

    <Section Heading="Failure Scenario">
        <p>Let's make some changes in our code to deliberately make the code fail. For demo, we can change the Student service to return firstName instead of fullName.</p>
        <BlogImage ImagePath="/images/blog/pact/pact-broker/failure.webp" Description="PACT verification failure scenario" />
        <p>After making this change, when the unit test is run, we can see the below result in Pact verification.</p>
    </Section>

    <Section Heading="Conclusion">
        <p>By integrating PactFlow with our contract testing, we can ensure better service communication and compliance between providers and consumers.</p>
        <p>For reference, the code repository being discussed is available on <a href="https://github.com/ajaysskumar/pact-net-example">GitHub</a>.</p>
        <p>Thanks for reading! Please share feedback in the comments or reach out via email at <a href="mailto:ajay.a338@gmail.com">ajay.a338@gmail.com</a>.</p>
    </Section>
</BlogContainer>
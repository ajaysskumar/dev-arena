@page "/blog/software-practices/solid/single-responsibility-principle"
@using TestArena.Blog.Common
@using TestArena.Blog.Common.NavigationUtils

@code{
    PageInfo currentPage = SiteMap.Pages.FirstOrDefault(x => x.RelativePath == "/blog/software-practices/solid/single-responsibility-principle")!;
}

<BlogContainer>
    <Header Title="@currentPage.Header"
            Image="@currentPage.ArticleImage" PublishedOn="@currentPage.PublishedOn" Authors="Ajay Kumar">
    </Header>

    <Section Heading="üîç What is the Single Responsibility Principle (SRP)?" Level="3">
        <p>
            Picture this: You‚Äôre in your kitchen, and you need to open a can, slice some bread, and tighten a loose screw. You could use a Swiss Army knife for all three, but wouldn‚Äôt it be easier (and safer!) to use a can opener, a bread knife, and a screwdriver‚Äîeach designed for its job? That‚Äôs the heart of the <b>Single Responsibility Principle (SRP)</b> in software design.
        </p>
        <p>
            SRP is the first of the five SOLID principles. In plain English: <b>"A class should have only one reason to change."</b> That means every module, class, or function in your code should focus on doing one thing‚Äîand doing it well.
        </p>
    </Section>

    <Section Heading="üí° Why Should You Care About SRP?" Level="3">
        <p>
            Ever tried to fix a bug and accidentally broke something totally unrelated? Or spent hours trying to test a class that does a million things? That‚Äôs what happens when SRP is ignored. Here‚Äôs why SRP is your friend:
        </p>
        <ul>
            <li><b>Maintenance is a breeze:</b> Changes in one area won‚Äôt cause chaos elsewhere.</li>
            <li><b>Testing is simpler:</b> You can test one responsibility without setting up the whole world.</li>
            <li><b>Reuse is real:</b> Grab just the part you need, without dragging along unrelated baggage.</li>
        </ul>
        <p>
            SRP makes your codebase friendlier for you and your teammates. No more stepping on each other‚Äôs toes!
        </p>
    </Section>

    <Section Heading="üïí When Does SRP Matter Most?" Level="3">
        <p>
            SRP shines as your project grows. Watch out for these red flags üö©:
        </p>
        <ul>
            <li>Classes with names like <code>UserManager</code> that juggle user data, authentication, and notifications.</li>
            <li>Methods that go on for pages, doing all sorts of unrelated things.</li>
            <li>Classes that get changed for all sorts of reasons‚Äîbusiness logic, UI tweaks, bug fixes, you name it.</li>
        </ul>
        <p>
            The earlier you spot these, the easier your life will be. But don‚Äôt stress‚Äîrefactoring is always an option as you learn more about your domain.
        </p>
    </Section>

    <Section Heading="üõ†Ô∏è How Do You Apply SRP in C#?" Level="3">
        <p>
            Let‚Äôs get practical. Imagine you have a <code>User</code> class that‚Äôs trying to do it all:
        </p>
        <CodeSnippet Number="1" Language="csharp" Description="A class doing too much (violating SRP)">
public class User
{
    public string Name { get; set; }
    public string Email { get; set; }

    public void ChangePassword(string newPassword)
    {
        // Change password logic
    }

    public void UpdateProfile(string newName, string newEmail)
    {
        // Update profile logic
    }

    public void SendWelcomeEmail()
    {
        // Email sending logic
    }
}
        </CodeSnippet>
        <p>
            Here, <code>User</code> is responsible for both managing user data and sending emails. If your email process changes (maybe you switch to a new provider), you have to touch this class‚Äîeven though user data logic hasn‚Äôt changed. That‚Äôs a recipe for bugs and headaches.
        </p>
        <p>
            Here‚Äôs how you can refactor with SRP in mind:
        </p>
        <CodeSnippet Number="2" Language="csharp" Description="SRP-compliant design: clear responsibilities">
public class User
{
    public string Name { get; set; }
    public string Email { get; set; }

    public void ChangePassword(string newPassword)
    {
        // Change password logic
    }

    public void UpdateProfile(string newName, string newEmail)
    {
        // Update profile logic
    }
}

public class EmailService
{
    public void SendWelcomeEmail(User user)
    {
        // Email sending logic
    }
}
        </CodeSnippet>
        <CalloutBox Type="tip" Title="Do all methods need their own class?">
            <p>
            Not at all! SRP is about grouping related methods that change for the same reason. For example, user data methods like <code>ChangePassword</code> and <code>UpdateProfile</code> belong together in <code>User</code>. Only move methods, like email sending, to a separate class if they have a different reason to change. Think of it as keeping all your kitchen knives in one drawer‚Äînot one per drawer!
            </p>
        </CalloutBox>
        <p>
            Now, <code>User</code> only manages user data, and <code>EmailService</code> handles emails. Each class has a single, clear job‚Äîand you can change one without worrying about the other.
        </p>
        <p>
            <b>Bottom line:</b> SRP is about grouping by reason to change, not splitting everything apart.
        </p>
    </Section>

    <Section Heading="üåç SRP in the Real World: Practical Scenarios" Level="3">
        <p>
            SRP isn‚Äôt just for classes. It applies to methods, modules, and even microservices. Here‚Äôs how you can spot and use SRP in your day-to-day work:
        </p>
        <ul>
            <li><b>Controllers in ASP.NET:</b> Keep them thin. Let services handle the heavy lifting.</li>
            <li><b>Services:</b> Each service should do one thing (e.g., <code>EmailService</code> only sends emails).</li>
            <li><b>UI Components:</b> A component should focus on a single part of the UI, not the whole page.</li>
        </ul>
        <p>
            Here‚Äôs a quick example of splitting responsibilities in an ASP.NET Core controller:
        </p>
        <CodeSnippet Number="3" Language="csharp" Description="Thin controller, separate service">
public class InvoiceController : ControllerBase
{
    private readonly IInvoiceService _invoiceService;
    public InvoiceController(IInvoiceService invoiceService)
    {
        _invoiceService = invoiceService;
    }

    [HttpPost]
    public IActionResult CreateInvoice(InvoiceDto dto)
    {
        var invoice = _invoiceService.Create(dto);
        return Ok(invoice);
    }
}

public interface IInvoiceService
{
    Invoice Create(InvoiceDto dto);
}
        </CodeSnippet>
        <p>
            The controller delegates business logic to <code>IInvoiceService</code>, keeping each class focused and testable. This makes your code easier to read, maintain, and extend.
        </p>
    </Section>

    <Section Heading="üèóÔ∏è SRP in Larger Systems: Microservices & Layered Architectures" Level="3">
        <p>
            SRP isn‚Äôt just for small classes‚Äîit‚Äôs a guiding light for designing larger systems too. In a <b>layered architecture</b>, for example, you‚Äôll often see clear separations: controllers handle HTTP requests, services contain business logic, and repositories manage data access. Each layer has its own responsibility, making the system easier to maintain and scale.
        </p>
        <p>
            In <b>microservices</b>, SRP helps define service boundaries. Each microservice should focus on a single business capability. This makes services easier to deploy, test, and evolve independently‚Äîjust like SRP does for classes.
        </p>
    </Section>

    <Section Heading="üö© Common Pitfalls (and How to Dodge Them)" Level="3">
        <ul>
            <li><b>God classes:</b> If a class has "Manager", "Processor", or "Helper" in its name and does too much, break it up.</li>
            <li><b>Feature creep:</b> Resist the urge to add unrelated features to existing classes. It‚Äôs tempting, but it‚Äôll bite you later.</li>
            <li><b>Premature abstraction:</b> Don‚Äôt over-engineer. Split responsibilities when it makes sense, not just for the sake of it.</li>
            <li><b>Misidentifying responsibilities:</b> Sometimes, it‚Äôs tricky to decide what counts as a single responsibility. If you find yourself changing a class for multiple unrelated reasons, it‚Äôs time to refactor.</li>
            <li><b>Over-splitting:</b> Don‚Äôt create a new class for every method. Group related behaviors that change for the same reason.</li>
        </ul>
        <p>
            <b>Pro tip:</b> When in doubt, ask: ‚ÄúIf I change this, what else will break?‚Äù If the answer is ‚Äúlots of things,‚Äù SRP can help!
        </p>
    </Section>

    <Section Heading="üîó SRP and the Other SOLID Principles" Level="3">
        <p>
            SRP is the foundation of SOLID, but it works best when combined with the other principles:
        </p>
        <ul>
            <li><b>Open/Closed Principle:</b> SRP makes it easier to extend classes without modifying them, since each class has a clear job.</li>
            <li><b>Liskov Substitution Principle:</b> When classes have a single responsibility, it‚Äôs easier to substitute them without surprises.</li>
            <li><b>Interface Segregation Principle:</b> SRP encourages small, focused interfaces that do one thing well.</li>
            <li><b>Dependency Inversion Principle:</b> SRP helps you define clear abstractions, making it easier to depend on interfaces rather than concrete implementations.</li>
        </ul>
        <p>
            Mastering SRP sets you up for success with the rest of SOLID!
        </p>
    </Section>

    <Section Heading="üìù Wrapping Up: Why SRP Makes Life Easier" Level="3">
        <p>
            The Single Responsibility Principle is about focus and clarity. Like using the right tool for the job, SRP helps you build software that‚Äôs easier to maintain, test, and extend. Start small, refactor when needed, and your future self (and teammates) will thank you.
        </p>
    </Section>
</BlogContainer>
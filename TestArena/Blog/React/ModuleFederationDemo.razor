@page "/blog/module-federation-demo-in-react"
@using TestArena.Blog.Common
@using TestArena.Blog.Common.NavigationUtils
  <style>
    table {
      width: 100%;
      border-collapse: collapse;
      margin: 1rem 0;
    }
    table, th, td {
      border: 1px solid #ccc;
    }
    th, td {
      padding: 0.5rem;
      text-align: left;
    }
    a {
      color: #2980b9;
    }
  </style>

@code{
    PageInfo currentPage = SiteMap.Pages.FirstOrDefault(x => x.RelativePath == "/blog/module-federation-demo-in-react");
}

<BlogContainer>
    <Header Title="@currentPage.Header"
            Image="@currentPage.ArticleImage" PublishedOn="@currentPage.PublishedOn" Authors="Ajay Kumar">
    </Header>


  <h2>Building Scalable React Applications with Module Federation</h2>

  <p>
    Modern web applications are growing at an unprecedented scale. Codebases are expanding, teams are scaling, and release cycles are accelerating. 
    In this fast-paced development world, <strong>Module Federation</strong> stands out as a game-changer for building scalable and independent frontend applications.
  </p>

  <h3>🧠 What is Module Federation?</h3>

  <p>
    Module Federation is a feature introduced in <strong>Webpack 5</strong> (see <a href="https://webpack.js.org/" target="_blank">Webpack</a>) that allows multiple independently-built and deployed applications (or “modules”) to share code and functionality with each other at runtime.
  </p>
  <p>
    It is an innovative feature that enables dynamic sharing of code and functionality between independently built applications at runtime. By eliminating the need for tightly coupled builds, it fosters seamless collaboration and reuse across projects.
  </p>
  <p>
    This capability makes Module Federation a key enabler of the micro-frontend architecture, where large frontend applications are divided into smaller, independently deployable units. This approach enhances scalability, accelerates development, and empowers teams to work autonomously. For a deeper dive, check out <a href="https://martinfowler.com/articles/micro-frontends.html" target="_blank">Martin Fowler's article on Micro-Frontends</a>.
  </p>
  <p>
    In simpler terms:
    <ul>
      <li>It lets <strong>App A</strong> use components or utilities from <strong>App B</strong> <em>without importing it during build time</em>.</li>
      <li>All sharing happens at <strong>runtime</strong>.</li>
    </ul>
  </p>

  <BlogImage Number="1" 
  Description="Module Federation Integration architecture" 
  ImagePath="/images/blog/react/module-federation/module federation.svg" />

  <blockquote>
    🧩 <strong>Micro Frontends</strong>: An architectural approach where frontend applications are broken down into smaller, independently deployable apps that work together.<br>
    🔌 <strong>Webpack</strong>: A module bundler that packages JavaScript code for usage in a browser.
  </blockquote>

  <h3>🚀 Why Should You Care About Module Federation?</h3>

  <p>Imagine you're building a product with multiple teams:</p>
  <ul>
    <li>One team handles <strong>authentication</strong></li>
    <li>Another handles <strong>dashboard</strong></li>
    <li>A third team builds <strong>analytics</strong></li>
  </ul>

  <p>Without Module Federation, you'd likely:</p>
  <ul>
    <li>Merge all code into a monolith</li>
    <li>Rebuild everything on every change</li>
    <li>Coordinate deployments like a game of Tetris</li>
  </ul>

  <p>With Module Federation:</p>
  <ul>
    <li>✅ Teams build and deploy independently</li>
    <li>✅ Apps share components and libraries at runtime</li>
    <li>✅ Performance improves through <strong>lazy loading</strong></li>
    <li>✅ You avoid <strong>code duplication</strong> (like React loaded multiple times)</li>
  </ul>

  <p>It’s like giving every team their own spaceship — yet letting them dock with the mothership when needed 🚀</p>

  <h3>📆 When Should You Use Module Federation?</h3>

  <p>Use Module Federation when:</p>
  <ul>
    <li>You're building <strong>micro frontends</strong></li>
    <li>Your application is growing too large for one team to manage</li>
    <li>You want <strong>independent deployments</strong></li>
    <li>You need to <strong>reuse components</strong> across projects</li>
    <li>You want to <strong>experiment</strong> without breaking the monolith</li>
  </ul>

  <p>Avoid it if:</p>
  <ul>
    <li>Your app is simple and tightly coupled</li>
    <li>You don’t want the overhead of managing multiple repos and deployments</li>
  </ul>

  <h3>🔧 How Does Module Federation Work?</h3>

  <p>Let’s explore using the GitHub repository: <a href="https://github.com/ajaysskumar/module-federation-demo" target="_blank">ajaysskumar/module-federation-demo</a></p>

  <h4>🏗 Project Structure</h4>
  <CodeSnippet Language="shell" Description="Running remote app">
module-federation-demo/
├── host-app/        # The main app consuming components
└── remote-app/      # The app exposing components
  </CodeSnippet>

  <h4>🔌 Step 1: Setup the Remote App</h4>
  <p>The <code>remote-app</code> exposes a <code>FruitsTable</code> component.</p>
  <p>
    The below code snippet configures the Webpack Module Federation Plugin for the <code>remote-app</code>. It specifies:
    <ul>
      <li><strong>name</strong>: The unique name of the remote application (<code>remoteApp</code>).</li>
      <li><strong>filename</strong>: The name of the file (<code>remoteEntry.js</code>) that will act as the entry point for exposing modules.</li>
      <li><strong>exposes</strong>: Declares the modules/components to be exposed by the remote app. Here, the <code>FruitsTable</code> component is exposed.</li>
      <li><strong>shared</strong>: Specifies shared dependencies like <code>react</code> and <code>react-dom</code>, ensuring they are loaded as singletons to avoid duplication.</li>
    </ul>
  </p>

  <h5>📜 remote-app/webpack.config.js</h5>
  <CodeSnippet Number="1" Language="js" Description="Running remote app">
    new ModuleFederationPlugin({
      name: "remoteApp",
      filename: "remoteEntry.js",
      exposes: {
        "./FruitsTable": "./src/FruitsTable",
      },
      shared: {
        react: {
          singleton: true
        },
        "react-dom": {
          singleton: true
        },
      },
    })
  </CodeSnippet>

  <h5>📜 remote-app/src/FruitsTable.js</h5>
    <CodeSnippet Number="2" Language="js" Description="FruitsTable remote component">
const FruitsTable = () => (
      &lt;div&gt;
        &lt;h1 style={{ textAlign: "center", color: "green" }}&gt;Hello from Remote App component&lt;/h1&gt;
        &lt;table style={{ width: "50%", margin: "0 auto", borderCollapse: "collapse" }}&gt;
          &lt;thead&gt;
            &lt;tr&gt;
              &lt;th style={{ border: "1px solid black", padding: "8px", backgroundColor: "#f2f2f2" }}&gt;Name&lt;/th&gt;
              &lt;th style={{ border: "1px solid black", padding: "8px", backgroundColor: "#f2f2f2" }}&gt;Quantity&lt;/th&gt;
              &lt;th style={{ border: "1px solid black", padding: "8px", backgroundColor: "#f2f2f2" }}&gt;Price&lt;/th&gt;
            &lt;/tr&gt;
          &lt;/thead&gt;
          &lt;tbody&gt;
            {fruits.map((fruit, index) => (
              &lt;tr key={index}&gt;
                &lt;td style={{ border: "1px solid black", padding: "8px", textAlign: "center" }}&gt;{fruit.name}&lt;/td&gt;
                &lt;td style={{ border: "1px solid black", padding: "8px", textAlign: "center" }}&gt;{fruit.quantity}&lt;/td&gt;
                &lt;td style={{ border: "1px solid black", padding: "8px", textAlign: "center" }}&gt;${fruit.price.toFixed(2)}&lt;/td&gt;
              &lt;/tr&gt;
            ))}
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/div&gt;
    );
  </CodeSnippet>

  <p><strong>Run remote-app:</strong></p>
  <CodeSnippet Number="3" Language="shell" Description="Running remote app">
cd remote-app
npm install
npm start
# Runs at http://localhost:3001
  </CodeSnippet>

  <h4>🧲 Step 2: Consume in the Host App</h4>
  <p>
    The above code snippet configures the Webpack Module Federation Plugin for the host application. It specifies:
    <ul>
      <li><strong>name</strong>: The unique name of the host application (<code>hostApp</code>).</li>
      <li><strong>remotes</strong>: Declares the remote application (<code>remoteApp</code>) and its entry point (<code>http://localhost:3001/remoteEntry.js</code>).</li>
      <li><strong>shared</strong>: Ensures that dependencies like <code>react</code> and <code>react-dom</code> are loaded as singletons to avoid duplication across the host and remote apps.</li>
    </ul>
  </p>

  <h5>📜 host-app/webpack.config.js</h5>

  <CodeSnippet Number="4" Language="js" Description="Module Federation Plugin setup in webpack config">
new ModuleFederationPlugin({
      name: "hostApp",
      remotes: {
        remoteApp: "remoteApp@http://localhost:3001/remoteEntry.js",
      },
      shared: {
        react: {
          singleton: true,
        },
        "react-dom": {
          singleton: true
        },
      },
    })
  </CodeSnippet>

  <BlogImage Number="2" Description="Remote js file"
        ImagePath="/images/blog/react/module-federation/Remote js file.png" />

  <h5>host-app/src/App.js</h5>
  <CodeSnippet Number="5" Language="js" Description="Host app consuming remote component">
    import React, { Suspense, lazy } from "react";

    const RemoteFruitsTable = lazy(() => import("remote_app/FruitsTable"));

    function App() {
      return (
        &lt;Suspense fallback=&lt;div&gt;This is host app. Remote will be loaded soon..&lt;/div&gt;&gt;
          &lt;RemoteFruitsTable /&gt;
        &lt;/Suspense&gt;
      );
    }

    export default App;
  </CodeSnippet>

  <p><strong>Run host-app:</strong></p>
  <CodeSnippet Number="6" Language="shell" Description="Running host app">
cd host-app
npm install
npm start
# Runs at http://localhost:3000
  </CodeSnippet>

  <p>Boom! 🎉 The host renders a Fruits table from the remote app — without bundling it.</p>

  <BlogImage Number="3" Description="Remote component loading in host component"
        ImagePath="/images/blog/react/module-federation/Remote component loading in host component.png" />
  <p><b>Notice</b> the network tab in above image to see <code>remoteEntry.js</code> file being loaded from <code>http://localhost:3001</code></p>
  <p class="tip">💡 And the best part? You can update the remote app independently, and the host will always fetch the latest version at runtime.</p>

  <h3>🧠 Key Concepts at a Glance</h3>

  <table>
    <thead>
      <tr><th>Term</th><th>Description</th></tr>
    </thead>
    <tbody>
      <tr><td><strong>Host</strong></td><td>App consuming remote modules</td></tr>
      <tr><td><strong>Remote</strong></td><td>App exposing modules</td></tr>
      <tr><td><strong>Exposes</strong></td><td>Declares what components the remote provides</td></tr>
      <tr><td><strong>Remotes</strong></td><td>Declares what the host will consume</td></tr>
      <tr><td><strong>Singleton</strong></td><td>Ensures only one instance of a library (like React) is used</td></tr>
      <tr><td><strong>Lazy Loading</strong></td><td>Load components on demand</td></tr>
    </tbody>
  </table>

  <h3>🔥 Final Thoughts — Why You Should Try Module Federation</h3>

  <p>Module Federation isn’t just a tool — it’s a new way of thinking:</p>
  <ul>
    <li>It <strong>breaks silos</strong> between frontend teams</li>
    <li>It <strong>speeds up development</strong> by reducing inter-team dependencies</li>
    <li>It helps you <strong>build faster, ship sooner, and scale better</strong></li>
  </ul>

  <blockquote>
    If you're working on a React app with growing complexity, <strong>you owe it to your team to explore Module Federation</strong>.
  </blockquote>

  <p>By adopting it, you're not only making your architecture more resilient — you're also unlocking a whole new level of collaboration and efficiency 🚀</p>

  <h4>📎 Demo Repository</h4>
  <p>Check out the complete working code:<br />
    <a href="https://github.com/ajaysskumar/module-federation-demo" target="_blank">
      🔗 ajaysskumar/module-federation-demo
    </a>
  </p>

  <p><em>Want help setting this up for your team or project? Let’s chat. Module Federation can be your next superpower. 💪</em></p>
</BlogContainer>
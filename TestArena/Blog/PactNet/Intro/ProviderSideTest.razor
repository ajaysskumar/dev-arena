@using TestArena.Blog.Common
@using TestArena.Blog.Common.TextDecorators

<Section Heading="Provider side tests and verification of pact file:">
    <ChildContent>
        <p>Once we have the pact file with us, we can use this pact file to validate it against the Provider API.</p>

        <p>Provider side tests take a little more effort than the consumer side tests, as it requires more setup.</p>

        <p>Essentially what happens is that PACT tries to fire up an actual instance of the provider service and test the same request as mentioned in the pact file against this fired up instance and then matches the response to validate.</p>

        <p>One must be wondering then, that actual instance will require other stuff as well, like a database, any third party APIs involved and many more. So what will happen with all that ? This is true, however, in case of Pact provider tests, all those things can be mocked. For database, if we do not want to mock, we can use in-memory databases as well. At the end, our target is to test the logic that resides in our code base that can possibly affect the nature of contract.</p>

        <p>Mocking is done in the same way we mock normal unit tests. Hence, the provider contract tests will also be running like unit tests only. Provider unit tests structure looks like below.</p>

        <BlogImage ImagePath="/images/blog/pact/intro/Files in provider tests.webp" Description="Files in provider tests"
                   Number="8"/>
        <p>In the <code>StudentApiFixture</code> class we are trying to setup and start a host</p>
        
        <GithubGistSnippet Title="Provider APIs pact setup" UserId="ajaysskumar" FileName="cc614d28d85e12fa789a2b95449e5cde"/>

        <p>In ProviderStateMiddleware class we are trying to setup the state of the system. It is to note that using Pact we can write complex test scenarios as well. For example lets say if student address anything other than Delhi then, consumer is expecting an additional field called City. These kind of scenarios can be handled by defining the state of the Provider API using state middlewares like below.</p>

        <p>In the below middleware, we are adding a middleware that will add a student with id 1 in the system. If you correlate, then code (<Line Number="11"/>) below is the same sentence that is mentioned in the pact file, provider state section.</p>
        
        <GithubGistSnippet Title="ProviderStateMiddleware class" UserId="ajaysskumar" FileName="1840eccd3ce4a945c78c0996f9bb45d3"/>

        <p>Next step is to define the TestStartup(can be named anything) class. This class contains all the code that our Provider API needs to get started.</p>
        <p>It is to note that an actual production application may contain various other services and middlewares like, logging, analytics, health checks etc, which does not affect the code logic. However, since our purpose is limited to testing the code that can potentially impact the contract side of things of the application, so we can ignore all other things, to make our tests lighter. This should be subset of the actual Startup.cs file in the Provider API. In short, just enough for our tests to run.</p>
        <p>Also, since ours is a small test application we are not mocking the methods defined in <code>IStudentRepo</code> class, but we can mock them whenever required. The idea is that Pact test should be able to run in isolation, not depending on any actual service or any environment.</p>
        
        <GithubGistSnippet Title="TestStartup class" UserId="ajaysskumar" FileName="8d26f9a989788452d1a50bc18a1da21d"/>

        <p>Finally the test case. In the test case, instruct Pact verifier about which fixture class to use for setting up and running the host (<Line Number="5"/>) and along with the path of the Pact file that was generated by the consumer (<Line Number="11"/>). Pact verifier take all the required information about host and pact file and finally runs <code>Verify()</code> method.</p>
        
        <GithubGistSnippet Title="Provider test class" UserId="ajaysskumar" FileName="72d9859ec5c4b2f8cf82b684dc7ded6b"/>
        
        <p>The test run will look something like below.</p>
        
        <BlogImage ImagePath="/images/blog/pact/intro/Provider test run for success case.webp" Description="Provider test run for success case"
                   Number="9"/>
    </ChildContent>
</Section>
@page "/blog/ai/openai-rest-api-in-dotnet"
@using TestArena.Blog.Common
@using TestArena.Blog.Common.NavigationUtils

@code {
    PageInfo currentPage = SiteMap.Pages.FirstOrDefault(x => x.RelativePath == "/blog/ai/openai-rest-api-in-dotnet")!;
}

<BlogContainer>
    <Header
        Title="@currentPage.Header"
        Description="Learn how to leverage OpenAI's powerful APIs to integrate AI capabilities into your applications. From authentication to implementation, discover everything you need to know about working with OpenAI APIs."
        Image="@currentPage.ArticleImage"
        PublishedOn="@currentPage.PublishedOn"/>

    <Section Heading="Understanding OpenAI APIs">
        <p>
            Imagine you're building a smart home system. Just as your system needs to communicate with various devices through specific protocols,
            developers need to interact with AI models through APIs. OpenAI's APIs serve as this communication bridge, allowing you to harness
            the power of advanced AI models like GPT-4 in your applications.
        </p>
    </Section>

    <Section Heading="What are OpenAI APIs?">
        <p>
            OpenAI APIs are RESTful web services that provide programmatic access to various AI models and capabilities. These APIs enable
            developers to integrate features like:
        </p>
        
        <ul>
            <li>Text generation and completion</li>
            <li>Chat-based interactions</li>
            <li>Image generation (DALL-E)</li>
            <li>Audio transcription and translation (Whisper)</li>
            <li>Fine-tuning capabilities for customized models</li>
        </ul>
    </Section>

    <Section Heading="When to Use OpenAI APIs">
        <p>
            OpenAI APIs are particularly valuable when you need to:
        </p>

        <ul>
            <li>Add natural language processing capabilities to your applications</li>
            <li>Create AI-powered chatbots or virtual assistants</li>
            <li>Generate or analyze content at scale</li>
            <li>Build creative tools that leverage AI capabilities</li>
            <li>Automate complex text analysis or generation tasks</li>
        </ul>
    </Section>

    <Section Heading="How to Implement OpenAI APIs">
        <h3>1. Authentication and Setup</h3>
        
        <p>
            First, you'll need to set up authentication with OpenAI. Here's how to configure it in a C# application:
        </p>

        <CodeSnippet Language="csharp" >
using OpenAI.GPT3;
using OpenAI.GPT3.Managers;
using OpenAI.GPT3.ObjectModels.RequestModels;

public class OpenAIService
{
    private readonly OpenAIService _openAiService;

    public OpenAIService(IConfiguration configuration)
    {
        var apiKey = configuration["OpenAI:ApiKey"];
        _openAiService = new OpenAIService(new OpenAiOptions { ApiKey = apiKey });
    }
}
        </CodeSnippet>

        <h3>2. Making API Calls</h3>
        
        <p>
            Let's implement a simple text completion example:
        </p>

        <CodeSnippet Language="csharp" >
public async Task&lt;string&gt; GenerateCompletion(string prompt)
{
    var completionResult = await _openAiService.Completions.CreateCompletion(new CompletionCreateRequest
    {
        Prompt = prompt,
        Model = Models.TextDavinciV3,
        MaxTokens = 100,
        Temperature = 0.7,
        TopP = 1,
        FrequencyPenalty = 0,
        PresencePenalty = 0
    });

    if (completionResult.Successful)
    {
        return completionResult.Choices[0].Text;
    }

    throw new Exception($"API Error: {completionResult.Error?.Message}");
}
        </CodeSnippet>

        <h3>3. Handling Chat Conversations</h3>
        
        <p>
            For chat-based interactions, use the Chat Completion API:
        </p>

        <CodeSnippet Language="csharp" >
public async Task&lt;string&gt; GetChatResponse(string userMessage)
{
    var chatResult = await _openAiService.ChatCompletion.CreateCompletion(new ChatCompletionCreateRequest
    {
        Messages = new List&lt;ChatMessage&gt;
        {
            ChatMessage.FromSystem("You are a helpful assistant."),
            ChatMessage.FromUser(userMessage)
        },
        Model = Models.Gpt_4,
        MaxTokens = 150
    });

    if (chatResult.Successful)
    {
        return chatResult.Choices[0].Message.Content;
    }

    throw new Exception($"API Error: {chatResult.Error?.Message}");
}
        </CodeSnippet>

        <h3>4. Error Handling and Best Practices</h3>

        <p>
            Implement robust error handling and rate limiting:
        </p>

        <CodeSnippet Language="csharp" >
public class OpenAIApiException : Exception
{
    public string ErrorCode { get; }
    public HttpStatusCode StatusCode { get; }

    public OpenAIApiException(string message, string errorCode, HttpStatusCode statusCode) 
        : base(message)
    {
        ErrorCode = errorCode;
        StatusCode = statusCode;
    }
}

private async Task&lt;T&gt; ExecuteWithRetry&lt;T&gt;(Func&lt;Task&lt;T&gt;&gt; action, int maxRetries = 3)
{
    for (int i = 0; i &lt; maxRetries; i++)
    {
        try
        {
            return await action();
        }
        catch (Exception ex) when (ex is HttpRequestException || ex is TimeoutException)
        {
            if (i == maxRetries - 1) throw;
            await Task.Delay((int)Math.Pow(2, i) * 1000); // Exponential backoff
        }
    }
    throw new Exception("Max retries exceeded");
}
        </CodeSnippet>
    </Section>

    <Section Heading="Important Considerations">
        <ul>
            <li>Always use environment variables or secure configuration for API keys</li>
            <li>Implement proper rate limiting and error handling</li>
            <li>Monitor your API usage and costs</li>
            <li>Cache responses when appropriate to optimize costs</li>
            <li>Be mindful of token limits and model capabilities</li>
        </ul>
    </Section>

    <EndNotes/>
</BlogContainer>
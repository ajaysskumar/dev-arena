

@page "/blog/performance-testing-with-k6"
@using TestArena.Blog.Common
@using TestArena.Blog.Common.NavigationUtils


@code{
    PageInfo currentPage = SiteMap.Pages.FirstOrDefault(x => x.RelativePath == "/blog/performance-testing-with-k6");

    List<RenderFragment> keyGoals = new()
    {
        new RenderFragment(builder => builder.AddContent(0, "Measure response times")),
        new RenderFragment(builder => builder.AddContent(0, "Identify bottlenecks")),
        new RenderFragment(builder => builder.AddContent(0, "Ensure scalability")),
        new RenderFragment(builder => builder.AddContent(0, "Validate reliability under stress"))
    };

    List<RenderFragment> bestTimesToTest = new()
    {
        new RenderFragment(builder => builder.AddContent(0, "Before production releases to catch issues early.")),
        new RenderFragment(builder => builder.AddContent(0, "After major changes (features, refactoring, infrastructure).")),
        new RenderFragment(builder => builder.AddContent(0, "Periodically as part of CI/CD pipelines.")),
        new RenderFragment(builder => builder.AddContent(0, "When expecting traffic spikes (campaigns, launches, events)."))
    };

    List<RenderFragment> alternativesToK6 = new()
    {
        new RenderFragment(builder => builder.AddContent(0, "Apache JMeter: Mature, GUI-based, supports many protocols.")),
        new RenderFragment(builder => builder.AddContent(0, "Gatling: Scala-based, expressive DSL, detailed reports.")),
        new RenderFragment(builder => builder.AddContent(0, "Locust: Python-based, easy scripting, scalable.")),
        new RenderFragment(builder => builder.AddContent(0, "Artillery: JavaScript-based, CLI and YAML/JS scripting.")),
        new RenderFragment(builder => builder.AddContent(0, "NBomber: .NET-based, C#/F#, HTTP/WebSockets/gRPC, extensible."))
    };

    List<RenderFragment> k6Steps = new()
    {
        new RenderFragment(builder => builder.AddContent(0, "Install K6: On macOS, run 'brew install k6'.")),
        new RenderFragment(builder => builder.AddContent(0, "Write a K6 test script in JavaScript.")),
        new RenderFragment(builder => builder.AddContent(0, "Run your API and execute the K6 test.")),
        new RenderFragment(builder => builder.AddContent(0, "Optionally, generate an HTML report with k6-reporter."))
    };

    List<RenderFragment> k6Metrics = new()
    {
        new RenderFragment(builder => builder.AddContent(0, "checks: Percentage of successful checks (e.g., status 200).")),
        new RenderFragment(builder => builder.AddContent(0, "http_req_duration: Response time stats (avg, min, median, max, percentiles).")),
        new RenderFragment(builder => builder.AddContent(0, "http_reqs: Total number of HTTP requests made.")),
        new RenderFragment(builder => builder.AddContent(0, "vus: Number of virtual users."))
    };
}


<BlogContainer>

    <Header Title="@currentPage.Header"
        Image="@currentPage.ArticleImage"
        PublishedOn="@currentPage.PublishedOn"
        Authors="Ajay Kumar"
        Description="@currentPage.Header" />

    <Section Heading="Introduction" Level="4">
        <p>
            Performance testing is a crucial part of modern software development, ensuring that your APIs can handle real-world traffic and deliver a smooth user experience. It is the process of evaluating how a system behaves under various levels of load. For APIs, this means simulating multiple users making requests to ensure the API remains responsive and stable.
        </p>
    <List Heading="Key goals" HeadingLevel="4" ChildContents="@keyGoals" />
    </Section>

    <Section Heading="Major types of Performance Testing" Level="4">
        <p>
            There are several major kinds of performance testing, each with a specific purpose:
        </p>
        <ol>
            <li><strong>Load Testing:</strong> Measures how the system performs under expected user loads. The goal is to identify performance bottlenecks before the software application goes live.</li>
            <li><strong>Stress Testing:</strong> Determines the system’s robustness by testing it under extreme conditions, often beyond its expected capacity, to see how it handles high traffic or data processing.</li>
            <li><strong>Soak (Endurance) Testing:</strong> Checks the system’s stability and performance over an extended period, ensuring it can handle sustained use without degradation.</li>
            <li><strong>Spike Testing:</strong> Evaluates the system’s reaction to sudden large spikes in the load generated by users.</li>
            <li><strong>Scalability Testing:</strong> Assesses the system’s ability to scale up or down in response to increased or decreased load.</li>
        </ol>
    </Section>

    <Section Heading="When Should You Do Performance Testing?" Level="4">
        <List Heading="When Should You Do Performance Testing?" HeadingLevel="4" ChildContents="@bestTimesToTest" />
    </Section>

    <Section Heading="Why Use K6 for API Performance Testing?" Level="4">
        <p>
            <a href="https://k6.io/">K6</a> is an open-source, developer-centric tool for load testing APIs and web applications. It’s popular because:
        </p>
        <ul>
            <li>It uses JavaScript for scripting, making it accessible to most developers.</li>
            <li>It’s easy to automate and integrate into CI/CD pipelines.</li>
            <li>It provides rich metrics and reporting.</li>
            <li>It’s lightweight and fast.</li>
        </ul>
    </Section>

    <Section Heading="Other Popular Tools for API Performance Testing" Level="4">
        <p>
            While K6 is a great choice, there are several other widely used tools for API performance testing:
        </p>
        <List Heading="Other Popular Tools" HeadingLevel="4" ChildContents="@alternativesToK6" />
        <p>
            Each tool has its strengths—choose based on your team’s language preferences, required features, and integration needs.
        </p>
    </Section>

    <Section Heading="How: A Practical Example with .NET API and K6" Level="4">
        <p>
            Let’s walk through a real-world example using this repository.
        </p>
        <Section Heading="The Use Case: Most Borrowed Book API" Level="4">
            <p>
                We have a simple ASP.NET Core Web API that exposes a single endpoint <code>/mostborrowedbook</code>. This endpoint returns the book with the highest borrow count from an in-memory database seeded with thousands of records.
            </p>
            <Section Heading="API Code Example" Level="4">
                <CodeSnippet Language="csharp">
// Controller action
[HttpGet]
public async Task&lt;IActionResult&gt; Get() {
  var result = await _context.Books.Select(b =>new {
    b.Id,
    b.Title,
    b.Author,
    BorrowCount = b.Borrows.Count
  }).OrderByDescending(b =>b.BorrowCount).FirstOrDefaultAsync();

  if (result == null || result.BorrowCount == 0) return NotFound("No borrow records found.");

  return Ok(result);
}
                </CodeSnippet>
            </Section>
        </Section>
        <Section Heading="Setting Up K6 for Performance Testing" Level="4">
            <List Heading="Steps" HeadingLevel="4" ChildContents="@k6Steps" />
            <Section Heading="K6 Test Script Example" Level="4">
                <CodeSnippet Description="K6 Test Script Example" Language="javascript">
import http from 'k6/http';
import {
    check,
    sleep
} from 'k6';

export const options = {
    vus: 10, // number of virtual users
    duration: '10s', // test duration
};

export default function() {
    const res = http.get('http://localhost:5127/mostborrowedbook');
    check(res, {
        'status is 200': (r) => r.status === 200,
    });
    sleep(1);
}  
                </CodeSnippet>
                <ul>
                    <li><strong>vus</strong>: Number of virtual users (simulated clients)</li>
                    <li><strong>duration</strong>: How long the test runs</li>
                    <li><strong>check</strong>: Asserts that the response status is 200</li>
                    <li><strong>sleep</strong>: Waits 1 second between requests</li>
                </ul>
            </Section>
            <Section Heading="Running the API and the Test" Level="4">
                <CodeSnippet Language="bash">
cd MostBorrowedBookApi
dotnet run
                </CodeSnippet>
                <CodeSnippet Language="bash">
k6 run k6-mostborrowedbook.js
                </CodeSnippet>
            </Section>
            <Section Heading="Generate an HTML Report (Optional)" Level="4">
                <CodeSnippet Language="bash">
k6 run k6-mostborrowedbook.js --out json=results.json
npx k6-reporter results.json
                </CodeSnippet>
            </Section>
        </Section>
    </Section>


    <Section Heading="Understanding K6 Metrics" Level="4">
        <p>
            After running the test, K6 outputs a summary like this:
        </p>
        <CodeSnippet Language="text">
checks................: 100.00% ✓ 1000 ✗ 0
http_req_duration....: avg=50ms min=30ms med=45ms max=120ms p(90)=80ms p(95)=100ms
http_reqs............: 1000  100.000000/s
vus..................: 10    min=10 max=10
        </CodeSnippet>
        <List Heading="Key Metrics" HeadingLevel="4" ChildContents="@k6Metrics" />
        <p>
            If you use k6-reporter, you’ll get an HTML file with charts and detailed breakdowns.
        </p>
    </Section>

    <Section Heading="Real-World Analogy" Level="4">
        <p>
            Think of your API like a busy coffee shop. Performance testing is like simulating hundreds of customers ordering coffee at once. You want to ensure the baristas (your API) can handle the rush without slowing down or making mistakes. K6 helps you create that simulated rush and measure how well your API copes.
        </p>
    </Section>

    <Section Heading="Conclusion" Level="4">
        <p>
            Performance testing is essential for delivering reliable APIs. K6 makes it easy to simulate real-world load, catch bottlenecks, and ensure your API is production-ready. With a simple setup and powerful reporting, it’s a great tool for developers and DevOps alike.
        </p>
        <p>
            <strong>Try it out with this repository and see how your API performs!</strong>
        </p>
    </Section>
</BlogContainer>

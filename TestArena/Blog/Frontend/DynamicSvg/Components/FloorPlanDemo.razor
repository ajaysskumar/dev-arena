@* Interactive Floo            <!-- Small Download Option -->
            <div class="demo-download-small">
                <button @onclick="DownloadCurrentSvg" class="demo-btn-download-small" title="Download current SVG with temperature settings">
                    💾
                </button>
            </div> Demo Component - Direct SVG DOM Manipulation *@
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop

<div class="interactive-demo-container">
    <!-- Live SVG Floor Plan -->
    <div class="floor-plan-section">
        <h4>🏢 Smart Building Temperature Monitor</h4>
        <div class="floor-plan-with-download">
            <div class="floor-plan-container" style="border: 2px solid #333; background: #f8f9fa; border-radius: 8px; display: inline-block;">
                <object id="floor-plan-svg" data="/images/blog/frontend/dynamic-svg/floor-plan.svg" type="image/svg+xml" width="600" height="450" 
                        style="display: block;" @onload="OnSvgLoaded">
                    <!-- Fallback content -->
                    <div style="padding: 50px; text-align: center; color: #dc3545;">
                        ❌ SVG not supported by your browser
                    </div>
                </object>
            </div>
            
            <!-- Small Download Option -->
            <div class="demo-download-small">
                <button @onclick="DownloadCurrentSvg" class="demo-btn-download-small" title="Download current SVG with temperature settings">
                    ⬇️
                </button>
            </div>
        </div>
        
        <!-- Temperature Legend -->
        <div class="demo-temperature-legend">
            <div class="legend-title"><strong>Temperature Scale:</strong></div>
            <div class="legend-items">
                <div class="demo-legend-item">
                    <div class="demo-legend-color" style="background-color: #a8dadc;"></div>
                    <span>&lt; 18°C</span>
                </div>
                <div class="demo-legend-item">
                    <div class="demo-legend-color" style="background-color: #457b9d;"></div>
                    <span>18-20°C</span>
                </div>
                <div class="demo-legend-item">
                    <div class="demo-legend-color" style="background-color: #1d3557;"></div>
                    <span>20-22°C</span>
                </div>
                <div class="demo-legend-item">
                    <div class="demo-legend-color" style="background-color: #f1faee;"></div>
                    <span>22-24°C</span>
                </div>
                <div class="demo-legend-item">
                    <div class="demo-legend-color" style="background-color: #f4a261;"></div>
                    <span>24-26°C</span>
                </div>
                <div class="demo-legend-item">
                    <div class="demo-legend-color" style="background-color: #e63946;"></div>
                    <span>&gt; 26°C</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Control Panel -->
    <div class="demo-control-panel">
        <h5>🌡️ Temperature Controls</h5>
        
        <div class="demo-control-row">
            <label><strong>Selected Room:</strong></label>
            <select @bind="selectedRoom" @bind:after="OnRoomSelectionChanged" class="demo-form-control">
                @foreach (var room in roomTemperatures.Keys)
                {
                    <option value="@room">@room</option>
                }
            </select>
        </div>
        
        <div class="demo-control-row">
            <label><strong>Temperature:</strong></label>
            <div class="demo-temperature-control">
                <input type="range" min="15" max="30" step="0.5" 
                       @bind="currentTemperature" @oninput="UpdateTemperature"
                       class="demo-temp-slider" />
                <span class="demo-temp-display" style="color: @GetTemperatureColor(currentTemperature);">
                    @currentTemperature.ToString("F1")°C
                </span>
            </div>
        </div>
        
        <div class="demo-preset-buttons">
            <button @onclick="() => SetPresetTemperature(17)" class="demo-btn demo-btn-cool">❄️ Cool</button>
            <button @onclick="() => SetPresetTemperature(22)" class="demo-btn demo-btn-comfort">🌱 Comfort</button>
            <button @onclick="() => SetPresetTemperature(27)" class="demo-btn demo-btn-warm">🔥 Warm</button>
            <button @onclick="RandomizeTemperatures" class="demo-btn demo-btn-random">🎲 Random</button>
        </div>
        
        <!-- Alert System -->
        @{
            var alerts = GetTemperatureAlerts();
        }
        @if (alerts.Any())
        {
            <div class="demo-alert-panel">
                <div class="demo-alert-title">⚠️ Alerts:</div>
                @foreach (var alert in alerts)
                {
                    <div class="demo-alert-item">@alert</div>
                }
            </div>
        }
        
        <div class="demo-tip">
            💡 <em>Click directly on rooms in the floor plan to select them!</em>
        </div>
    </div>
</div>

@code {
    // Component state
    private Dictionary<string, double> roomTemperatures = new()
    {
        { "Conference Room", 22.0 },
        { "Office 1", 21.5 },
        { "Office 2", 23.0 },
        { "Kitchen", 24.5 },
        { "Server Room", 18.0 },
        { "Storage", 20.0 }
    };

    private string selectedRoom = "Conference Room";
    private double currentTemperature = 22.0;
    private Random random = new Random();
    private bool svgLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        currentTemperature = roomTemperatures[selectedRoom];
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setBlazorReference", DotNetObjectReference.Create(this));
        }
    }

    private async Task OnSvgLoaded()
    {
        svgLoaded = true;
        await UpdateSvgDisplay();
        await SetupClickHandlers();
    }

    private async Task UpdateSvgDisplay()
    {
        if (!svgLoaded) return;

        // Update room colors and temperatures
        foreach (var room in roomTemperatures.Keys)
        {
            var roomId = GetRoomId(room);
            var color = GetRoomColor(room);
            var temp = roomTemperatures[room].ToString("F1");
            var textColor = GetTextColor(room);
            
            // Update room fill color
            await JSRuntime.InvokeVoidAsync("updateRoomColor", roomId, color);
            
            // Update temperature text
            var coords = GetRoomTextCoords(room);
            await JSRuntime.InvokeVoidAsync("updateTemperatureText", coords.x, coords.y, $"{temp}°C", textColor);
        }

        // Update selection indicator
        await UpdateSelectionIndicator();
    }

    private async Task UpdateSelectionIndicator()
    {
        if (!svgLoaded) return;

        // Remove existing selection indicator
        await JSRuntime.InvokeVoidAsync("removeSelectionIndicator");

        // Add new selection indicator
        if (!string.IsNullOrEmpty(selectedRoom))
        {
            var coords = GetRoomCoordinates(selectedRoom);
            if (coords.HasValue)
            {
                await JSRuntime.InvokeVoidAsync("addSelectionIndicator", 
                    coords.Value.x, coords.Value.y, coords.Value.width, coords.Value.height);
            }
        }
    }

    private async Task SetupClickHandlers()
    {
        if (!svgLoaded) return;

        // Set up click handlers for each room
        foreach (var room in roomTemperatures.Keys)
        {
            var roomId = GetRoomId(room);
            await JSRuntime.InvokeVoidAsync("setupRoomClickHandler", roomId, room);
        }
    }

    private string GetRoomId(string roomName)
    {
        return roomName switch
        {
            "Conference Room" => "room-conference",
            "Office 1" => "room-office1", 
            "Office 2" => "room-office2",
            "Kitchen" => "room-kitchen",
            "Server Room" => "room-server",
            "Storage" => "room-storage",
            _ => ""
        };
    }

    private (int x, int y) GetRoomTextCoords(string roomName)
    {
        return roomName switch
        {
            "Conference Room" => (80, 67),
            "Office 1" => (200, 62),
            "Office 2" => (320, 62),
            "Kitchen" => (70, 147),
            "Server Room" => (190, 142),
            "Storage" => (320, 147),
            _ => (0, 0)
        };
    }

    private string GetTextColor(string roomName)
    {
        var color = GetRoomColor(roomName);
        // Use white text on dark backgrounds, dark text on light backgrounds
        return color switch
        {
            "#1d3557" or "#457b9d" => "#fff",
            _ => "#333"
        };
    }

    private string GetRoomColor(string roomName)
    {
        var temp = roomTemperatures[roomName];
        
        if (temp < 18) return "#a8dadc";      // Light blue - very cool
        if (temp < 20) return "#457b9d";      // Blue - cool
        if (temp < 22) return "#1d3557";      // Dark blue - comfortable cool
        if (temp < 24) return "#f1faee";      // Light green - comfortable
        if (temp < 26) return "#f4a261";      // Orange - warm
        return "#e63946";                     // Red - hot
    }

    private double GetRoomTemp(string roomName)
    {
        return roomTemperatures[roomName];
    }

    private string GetTemperatureColor(double temperature)
    {
        if (temperature < 18) return "#17a2b8";
        if (temperature < 22) return "#1d3557"; 
        if (temperature < 24) return "#28a745";
        if (temperature < 26) return "#fd7e14";
        return "#dc3545";
    }

    private (int x, int y, int width, int height)? GetRoomCoordinates(string roomName)
    {
        return roomName switch
        {
            "Conference Room" => (20, 20, 120, 80),
            "Office 1" => (150, 20, 100, 80),
            "Office 2" => (260, 20, 120, 80),
            "Kitchen" => (20, 110, 100, 70),
            "Server Room" => (130, 110, 120, 70),
            "Storage" => (260, 110, 120, 70),
            _ => null
        };
    }

    private async Task SelectRoomAsync(string roomName)
    {
        selectedRoom = roomName;
        currentTemperature = roomTemperatures[roomName];
        await UpdateSvgDisplay();
        StateHasChanged();
    }

    private async Task OnRoomSelectionChanged()
    {
        currentTemperature = roomTemperatures[selectedRoom];
        await UpdateSvgDisplay();
    }

    // Method for JavaScript interop (for clicking on SVG elements)
    [JSInvokable]
    public async Task SelectRoom(string roomName) => await SelectRoomAsync(roomName);

    private async Task UpdateTemperature(ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out var temp))
        {
            currentTemperature = temp;
            roomTemperatures[selectedRoom] = temp;
            await UpdateSvgDisplay();
        }
    }

    private async Task SetPresetTemperature(double temperature)
    {
        currentTemperature = temperature;
        roomTemperatures[selectedRoom] = temperature;
        await UpdateSvgDisplay();
    }

    private async Task RandomizeTemperatures()
    {
        var rooms = roomTemperatures.Keys.ToList();
        foreach (var room in rooms)
        {
            roomTemperatures[room] = Math.Round(15 + random.NextDouble() * 15, 1);
        }
        currentTemperature = roomTemperatures[selectedRoom];
        await UpdateSvgDisplay();
    }

    private async Task DownloadCurrentSvg()
    {
        if (!svgLoaded) return;

        try
        {
            // Get the current SVG content with all modifications
            await JSRuntime.InvokeVoidAsync("downloadCurrentSvg");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading SVG: {ex.Message}");
        }
    }

    private List<string> GetTemperatureAlerts()
    {
        var alerts = new List<string>();
        
        foreach (var room in roomTemperatures)
        {
            if (room.Value < 16)
                alerts.Add($"🥶 {room.Key} is too cold ({room.Value:F1}°C)");
            else if (room.Value > 28)
                alerts.Add($"🔥 {room.Key} is too hot ({room.Value:F1}°C)");
            else if (room.Key == "Server Room" && room.Value > 22)
                alerts.Add($"⚠️ Server Room elevated ({room.Value:F1}°C)");
        }
        
        return alerts;
    }
}

<script>
    window.setBlazorReference = (dotNetRef) => {
        window.blazorCulture = dotNetRef;
    };

    window.updateRoomColor = (roomId, color) => {
        const svgObject = document.getElementById('floor-plan-svg');
        if (svgObject && svgObject.contentDocument) {
            const room = svgObject.contentDocument.getElementById(roomId);
            if (room) {
                room.setAttribute('fill', color);
            }
        }
    };

    window.updateTemperatureText = (x, y, text, color) => {
        const svgObject = document.getElementById('floor-plan-svg');
        if (svgObject && svgObject.contentDocument) {
            // Find text element at specific coordinates
            const textElements = svgObject.contentDocument.querySelectorAll('text');
            for (let textEl of textElements) {
                if (textEl.getAttribute('x') == x && textEl.getAttribute('y') == y && textEl.textContent.includes('°C')) {
                    textEl.textContent = text;
                    textEl.setAttribute('fill', color);
                    break;
                }
            }
        }
    };

    window.addSelectionIndicator = (x, y, width, height) => {
        const svgObject = document.getElementById('floor-plan-svg');
        if (svgObject && svgObject.contentDocument) {
            const svg = svgObject.contentDocument.documentElement;
            
            // Create selection rectangle
            const rect = svgObject.contentDocument.createElementNS('http://www.w3.org/2000/svg', 'rect');
            rect.setAttribute('id', 'selection-indicator');
            rect.setAttribute('x', x - 3);
            rect.setAttribute('y', y - 3);
            rect.setAttribute('width', width + 6);
            rect.setAttribute('height', height + 6);
            rect.setAttribute('fill', 'none');
            rect.setAttribute('stroke', '#007bff');
            rect.setAttribute('stroke-width', '3');
            rect.setAttribute('stroke-dasharray', '5,5');
            rect.style.animation = 'dash 2s linear infinite';
            
            svg.appendChild(rect);
        }
    };

    window.removeSelectionIndicator = () => {
        const svgObject = document.getElementById('floor-plan-svg');
        if (svgObject && svgObject.contentDocument) {
            const existing = svgObject.contentDocument.getElementById('selection-indicator');
            if (existing) {
                existing.remove();
            }
        }
    };

    window.setupRoomClickHandler = (roomId, roomName) => {
        const svgObject = document.getElementById('floor-plan-svg');
        if (svgObject && svgObject.contentDocument) {
            const room = svgObject.contentDocument.getElementById(roomId);
            if (room) {
                room.style.cursor = 'pointer';
                room.addEventListener('click', () => {
                    if (window.blazorCulture) {
                        window.blazorCulture.invokeMethodAsync('SelectRoom', roomName);
                    }
                });
            }
        }
    };

    window.downloadCurrentSvg = () => {
        const svgObject = document.getElementById('floor-plan-svg');
        if (svgObject && svgObject.contentDocument) {
            try {
                // Clone the SVG element to preserve the current state
                const svgElement = svgObject.contentDocument.documentElement.cloneNode(true);
                
                // Create a new SVG string with current modifications
                const serializer = new XMLSerializer();
                let svgString = serializer.serializeToString(svgElement);
                
                // Add XML declaration if not present
                if (!svgString.startsWith('<?xml')) {
                    svgString = '<?xml version="1.0" encoding="UTF-8"?>\n' + svgString;
                }
                
                // Create blob and download
                const blob = new Blob([svgString], { type: 'image/svg+xml' });
                const url = window.URL.createObjectURL(blob);
                
                // Create temporary download link
                const downloadLink = document.createElement('a');
                downloadLink.href = url;
                downloadLink.download = 'floor-plan-current-state.svg';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                document.body.removeChild(downloadLink);
                
                // Clean up
                window.URL.revokeObjectURL(url);
            } catch (error) {
                console.error('Error downloading SVG:', error);
                alert('Error downloading SVG. Please try again.');
            }
        } else {
            alert('SVG not loaded yet. Please wait and try again.');
        }
    };

    // Add CSS animation for selection indicator
    const style = document.createElement('style');
    style.textContent = `
        @@keyframes dash {
            to { stroke-dashoffset: -10; }
        }
    `;
    document.head.appendChild(style);
</script>

<style>
    /* Interactive Demo Styles */
    .interactive-demo-container {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border: 2px solid #dee2e6;
        border-radius: 12px;
        padding: 25px;
        margin: 25px 0;
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
    }

    .floor-plan-section {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 20px;
        margin-bottom: 25px;
    }

    .floor-plan-section h4 {
        margin: 0 0 15px 0;
        color: #495057;
        text-align: center;
    }

    .demo-room-rect {
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .demo-room-rect:hover {
        stroke-width: 4;
        filter: brightness(1.1);
        transform: scale(1.02);
    }

    .demo-selection-indicator {
        animation: demo-dash 2s linear infinite;
    }

    .selection-indicator {
        animation: demo-dash 2s linear infinite;
    }

    @@keyframes demo-dash {
        to {
            stroke-dashoffset: -10;
        }
    }

    .demo-temperature-legend {
        display: flex;
        flex-direction: column;
        gap: 10px;
        align-items: center;
        font-size: 12px;
        background: rgba(255, 255, 255, 0.9);
        padding: 15px;
        border-radius: 8px;
        border: 1px solid #dee2e6;
        max-width: 600px;
    }

    .floor-plan-with-download {
        display: flex;
        align-items: flex-start;
        gap: 10px;
    }

    .demo-download-small {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    .demo-btn-download-small {
        background-color: transparent;
        color: #17a2b8;
        border: 2px solid #17a2b8;
        border-radius: 6px;
        cursor: pointer;
        font-size: 16px;
        width: 35px;
        height: 35px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .demo-btn-download-small:hover {
        background-color: #17a2b8;
        color: white;
        transform: translateY(-1px);
        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.2);
    }

    .legend-title {
        font-weight: bold;
        margin-bottom: 5px;
    }

    .legend-items {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        justify-content: center;
    }

    .demo-legend-item {
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .demo-legend-color {
        width: 14px;
        height: 14px;
        border: 1px solid #333;
        border-radius: 3px;
    }

    .demo-control-panel {
        background: rgba(255, 255, 255, 0.95);
        padding: 20px;
        border-radius: 8px;
        border: 1px solid #dee2e6;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .demo-control-panel h5 {
        margin: 0 0 15px 0;
        color: #495057;
        text-align: center;
    }

    .demo-control-row {
        display: flex;
        align-items: center;
        gap: 15px;
        margin: 15px 0;
        flex-wrap: wrap;
    }

    .demo-control-row label {
        min-width: 120px;
        font-weight: 600;
        color: #495057;
    }

    .demo-form-control {
        padding: 8px 12px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 14px;
        min-width: 150px;
        background: white;
    }

    .demo-temperature-control {
        display: flex;
        align-items: center;
        gap: 15px;
        flex: 1;
    }

    .demo-temp-slider {
        flex: 1;
        max-width: 200px;
        height: 6px;
        -webkit-appearance: none;
        appearance: none;
        background: #ddd;
        border-radius: 3px;
        outline: none;
    }

    .demo-temp-slider::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 18px;
        height: 18px;
        background: #007bff;
        border-radius: 50%;
        cursor: pointer;
    }

    .demo-temp-slider::-moz-range-thumb {
        width: 18px;
        height: 18px;
        background: #007bff;
        border-radius: 50%;
        cursor: pointer;
        border: none;
    }

    .demo-temp-display {
        min-width: 70px;
        font-weight: bold;
        font-size: 16px;
        text-align: center;
    }

    .demo-preset-buttons {
        display: flex;
        gap: 8px;
        margin: 20px 0;
        flex-wrap: wrap;
        justify-content: center;
    }

    .demo-btn {
        padding: 8px 12px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 12px;
        font-weight: 600;
        transition: all 0.2s;
        white-space: nowrap;
    }

    .demo-btn-cool { background-color: #17a2b8; color: white; }
    .demo-btn-comfort { background-color: #28a745; color: white; }
    .demo-btn-warm { background-color: #fd7e14; color: white; }
    .demo-btn-random { background-color: #6f42c1; color: white; }

    .demo-btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        opacity: 0.9;
    }

    .demo-alert-panel {
        background: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 6px;
        padding: 12px;
        margin: 15px 0;
    }

    .demo-alert-title {
        font-weight: bold;
        color: #856404;
        margin-bottom: 8px;
    }

    .demo-alert-item {
        font-size: 13px;
        color: #856404;
        margin: 4px 0;
    }

    .demo-tip {
        font-size: 12px;
        color: #6c757d;
        margin-top: 15px;
        text-align: center;
        font-style: italic;
    }

    /* Responsive design for demo */
    @@media (max-width: 768px) {
        .interactive-demo-container {
            padding: 15px;
        }
        
        .floor-plan-with-download {
            flex-direction: column;
            align-items: center;
            gap: 15px;
        }
        
        .floor-plan-container {
            width: 100% !important;
            overflow-x: auto;
        }
        
        .floor-plan-container object {
            width: 100%;
            min-width: 400px;
            height: auto;
        }
        
        .demo-download-small {
            flex-direction: row;
            justify-content: center;
        }
        
        .legend-items {
            gap: 8px;
        }
        
        .demo-control-row {
            flex-direction: column;
            align-items: flex-start;
        }
        
        .demo-control-row label {
            min-width: auto;
        }
        
        .demo-preset-buttons {
            justify-content: center;
            gap: 6px;
        }
    }

    @@media (max-width: 480px) {
        .floor-plan-container object {
            min-width: 350px;
        }
        
        .demo-btn, .demo-btn-download-small {
            font-size: 14px;
        }
        
        .demo-btn-download-small {
            width: 32px;
            height: 32px;
        }
    }
</style>
